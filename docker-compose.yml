version: '3.8'

services:

  etl_old:
    build:
      context: ./etl_old
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    volumes:
      - ./etl_old:/usr/src/app
      - ./database/data:/data
      - ./certs/production/database:/certs
    env_file:
      - ~/.secrets/zenon/database.env
    # depends_on:
    #   - cockroachdb
    # networks:
    #   - es-network

  etl:
    build:
      context: ./etl
      dockerfile: Dockerfile
      args:
        - COPY_CONTENTS=false # overrides COPY_CONTENTS in Dockerfile
    ports:
      - "4000:4000"
    volumes:
      # Mount local codebase
      - ./etl:/opt/dagster/app
      - ./database/data:/data
      - ./certs/production/database:/certs
    environment:
      DAGSTER_HOME: /opt/dagster/app
    env_file:
      - ~/.secrets/zenon/database.env
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/usr/src/app
      - ./database/data:/storage
      - ./certs/production/database:/certs
    env_file:
      - ~/.secrets/zenon/database.env
    environment:
      - MODE=${MODE}
  
  browsersync-for-backend-dev:
    ports:
      - "3000:3000"
      - "3001:3001"  # For Browsersync UI
    build:
      context: ./backend/app/utils
      dockerfile: Dockerfile.browsersync-for-dev
    volumes:
      - ./backend:/backend
    depends_on:
      - backend

#   frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     ports:
#       - "5000:5000"
#     volumes:
#       - ./frontend:/app # assuming your frontend working directory in its Dockerfile is /app
#     environment:
#       API_URL: "http://backend:8000" # this is how the frontend would communicate with the backend in this setup

  # my-dagster-project:
  #   build:
  #     context: ./my-dagster-project
  #     dockerfile: Dockerfile
  #     args:
  #       - COPY_CONTENTS=false # overrides COPY_CONTENTS in Dockerfile
  #   ports:
  #     - "4000:4000"
  #   volumes:
  #     # Mount local codebase
  #     - ./my-dagster-project:/opt/dagster/app
  #     - ./certs/production/database:/certs
  #   environment:
  #     DAGSTER_HOME: /opt/dagster/app
  #   env_file:
  #     - ~/.secrets/zenon/database.env
  #   restart: always
  #   # networks:
  #   #   - es-network

  cockroachdb:
    build:
      context: database
      dockerfile: Dockerfile
    ports:
      - "26257:26257"
      - "8080:8080"
      - "26258:26258"
    volumes:
      - cockroachdb-data:/cockroach/cockroach-data
      - ./certs/development/database:/certs

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - es-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - es-network

volumes:
  cockroachdb-data:
  dagster:
  es-data:
    driver: local

networks:
  es-network:
    driver: bridge